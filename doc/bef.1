.TH "bef" "1" "23 Mar 2024" "bef v0.2.3" "User Commands"
.P
.SH "NAME"
bef \- An extensible, fast, and useable file utility to encode and decode erasure coded streams of data.
.P
.SH "SYNOPSIS"
.P
.nf
bef [OPTIONS] -i [INPUT] -o [OUTPUT]
.P
.SH "DESCRIPTION"
bef is an extensible, simple, modular, and fast file utility that creates streams of interleaved erasure coded data. It was made to be an easy to use replacement to existing software packages such as par2cmdline and zfec. It is designed to be streamable and has an intuitive command line interface to encode/construct and decode/deconstruct erasure coded streams into a file with minimal overhead.
.P
It is centered around the concept of blocks of data, of determinate size, which are then subdivided into k block fragments and fed to a parity library backend that gives back k data fragments and m parity fragments. These fragments are then hashed and interleaved with some number of other fragments from other blocks. This is designed with minimal metadata and complexity such that it can be streamed to and fro, with us only needing at least n blocks worth of memory at a time. A simple diagram of the format is below.
.P
[B1-F1] -> [B2-F1] -> [B3-F1] -> [B1-F2] -> [...]
.P
The utility is extremely fast in its default settings, computing around ~1000MiB/s on a i5-7300U CPU on a laptop.
.P
.SH "OPTIONS"
.SS "Byte Suffixes"
Options that require a number of bytes support byte suffixes. Shortened suffixes, like 'K', 'M', and 'G' default to the IEC power of two suffixes.
.TP
\fBKiB\fR indicates 1024 bytes
.TP
\fBKB\fR indicates 1000 bytes
.TP
\fBMiB\fR indicates 1024^2 bytes
.TP
\fBMB\fR indicates 1000^2 bytes
.TP
\fBGiB\fR indicates 1024^3 bytes
.TP
\fBGB\fR indicates 1000^3 bytes
.SS "Options"
Generally, any option with a integer argument can be passed 0 or not passed at all to get the default values.
.TP
\fB\-h\fR, \fB\-\-help\fR
Prints a helpful help message when this manpage is not available to read.
.TP
\fB\-V\fR, \fB\-\-version\fR
Prints the version of bef.
.TP
\fB\-v\fR, \fB\-\-verbose\fR
Enables verbose mode, printing various things as the command goes along. The more time you use this argument, the more verbose it gets.
.TP
\fB\-c\fR, \fB\-\-construct\fR, \fB\-\-encode\fR
Constructs a BEF file from the given input file and outputs it to the given output file.
.TP
\fB\-d\fR, \fB\-\-deconstruct\fR, \fB\-\-decode\fR
Inverse of the above, deconstructs a received BEF file from input and outputs the real data to output.
.TP
\fB\-M\fR, \fB\-\-minimize\fR
Enables the minimize flag, which modifies the behavior of the constructor such that when the given stream ends before exhausting the expected input buffer (size of interleaved blocks), it will minimize the block size to a smaller value so as to not bloat the output with lots of padded bytes. Generally unrecommended, as it decreases the maximal burst corruption size that the file can take before being unrecoverable.
.TP
\fB\-p\fR, \fB\-\-prefix\fR
Sets the header options to defined presets each suited to a particular use case. This argument, due to getopt, is position dependent such that if you specify it before other argument, you can modify the header options contrary to the preset. This could be useful if you want to modify a portion of the preset, but not specify the whole thing. This does not replace the defaults, those still get applied if you set any option to 0 or omit it.
.IP
standard: A preset that mimics the Reed Solomon codes on a Compact Disc. Compact Discs use two interleaved codes, a inner (32, 28) code (k=28, m=4 in our language), and a outer (28, 24) (k=24, m=4). The sum of this is that the rate of data to total bytes is approximately (28*24)/(32*28) or 3/4 (1 parity byte for every 3 data bytes). So to mimic it, we shall have a setting of k=24, m=8 interleaved twice (rather than the default 5).
.IP
share: A preset made for sharing over the internet. Since there are so many checksums and HMACS in the case of HTTPS, SSL, or other popular encrypted communications, it is highly unlikely significant amounts of corruption will effect you. So the preset has a 1% redundancy rate at k=100, m=1.
.IP
archive: A preset made for archiving the data long term. I'd imagine you'd want to lose a significant percentage of the archive and still come out okay. So the redundancy rate is 50% at k=16, m=8, this allows you to lose around 33% of the output and still be able to reconstruct the data faithfully. Likewise, the interleave number is set to 10 blocks, to get the burst size to ~98.75% of the total size of the parities in the set, or around ~320KiB per 1MiB.
.IP
paranoid: A preset made for paranoid archivers. Similar to archive, except it has 100% redundancy (k=16, m=16) and 20 interleaved blocks. This would allow you to corrupt half the output file on average (hopefully not in one burst!) and still be able to recover the original data. The 10 extra interleaved blocks makes the worst case burst size around 99.69% of the total size of the parities in the set, or around ~1.24MiB per 2.5MiB.
.TP
\fB\-r\fR, \fB\-\-raw\fR
Enables the special raw mode, which has different behaviors depending on whether \fB\-\-construct\fR or \fB\-\-deconstruct\fR is used with it. If \fB\-\-construct\fR is used, it is functionally the same except is does not write the header to output. If \fB\-\-deconstruct\fR is used, it takes in the given values and doesn't try to read a header. In addition to enabling raw mode, it is necessary to give the fragment size too, such that we know how to read the given stream. Currently the easiest way to get this is to enable verbosity and give a random fragment size on construction, the command will fail and tell you what you should've given instead.
.TP
\fB\-b\fR, \fB\-\-bsize\fR
Specifies the block size to be used in construction of a BEF file. The default block size is 65536 bytes.
.TP
\fB\-k\fR, \fB\-\-data\fR
The number of data fragments to split the block size into. The default number of data fragments is 15.
.TP
\fB\-m\fR, \fB\-\-parity\fR
The number of parity fragments to create in redundancy to the data fragments. The default number of parity fragments is 1.
.TP
\fB\-l\fR, \fB\-\-interleave\fR
The number of blocks (specifically their fragments) to interleave. The default number is 5, as it makes the worst case burst size around 80% of the total parity size per set of interleaved blocks when m = 1. The more blocks you interleave, the closer and closer the absolute worst case burst size becomes to the total size of your parity fragments per set of interleaved blocks. Likewise, the more parity fragments you create, the closer and closer that burst size becomes to the total size of those parity fragments per set of interleaved blocks.
.TP
\fB\-P\fR, \fB\-\-parity-type\fR
The specific parity backend type to use to compute the erasure codes. Options are below. Default is fec-vand, as it is fast in almost all cases and allows up to 256 fragments. All mentions of scalability are in reference to the number of parity fragments created, not total.
.IP
jerasure-vand: The Vandermonde Reed Solomon implementation from libJerasure, provided by liberasurecode. Reasonably fast, but single-threaded and scales poorly. Max number of fragments is 32.
.IP
jerasure-cauchy: The Cauchy Reed Solomon implementation from libJerasure, provided by liberasurecode. Reasonably fast, but single-threaded, scales poorly, and the max number of fragments is only 16.
.IP
liberasurecode-vand: The Vandermonde Reed Solomon implementation offered by liberasurecode, terribly slow and scales poorly. Max number of fragments is 32.
.IP
intel-vand: The Vandermonde Reed Solomon implementation offered by Intel's ISA-L, provided by liberasurecode. Very fast and scales reasonably well. Max number of fragments is 32.
.IP
intel-cauchy: The Cauchy Reed Solomon implementation offered by Intel's ISA-L, provided by liberasurecode. Very fast and scales reasonably well. Max number of fragments is 32.
.IP
fec-vand: The Vandermonde Reed Solomon implementation offered by zfec's modified libfec library. Extremely fast and scales well. Max number of fragments is 256.
.IP
cm256-cauchy: The Cauchy Reed Solomon implementation offered by cm256cc. Extremely fast and scales well, but not as well as fec-vand. Max number of fragments is 256.
.IP
openfec-vand: The Vandermonde Reed Solomon implementation offered by OpenFEC. Extremely fast, but single-threaded and scales poorly. Max number of fragments is 256.
.IP
leopard: The Reed Solomon implemented by Chris Taylor's Leopard. Uses a FFT instead of a Vandermonde Matrix, and is extremely fast and scales incredibly well. Max number of fragments is 65536, but k must be greater than or equal to m and likewise must be greater than or equal to two, or put simply, 2 <= k <= m, k + m <= 65536.
.IP
wirehair: The Fountain Code implemented by Chris Taylor's Wirehair. Reasonably fast (not as fast as Leopard or zfec) and scales scaringly well. This is the most scalable of all the parities currently offered, with the restriction that k <= 64000. Max number of fragments is 129535 (64000+65535).
.TP
\fB\-H\fR, \fB\-\-hash-type\fR
The specific hash backend type to use to compute the fragment and header hashes. At this moment, the size of these hashes are at most 256 bits. The options are below, and the default is xxhash as it is exceptionally fast. If one desires cryptographic security against evil corruption, then the best recommendation is either BLAKE3 for a good compromise on speed or SHA256
.IP
none: No hash, living life dangerously
.IP
sha1: Uses the SHA1 hash algorithm, provided by OpenSSL.
.IP
sha256: Uses the SHA256 hash algorithm, provided by OpenSSL.
.IP
sha3: Uses the SHA3 hash algorithm, provided by OpenSSL.
.IP
blake2s: Uses the BLAKE2S hash algorithm, provied by OpenSSL.
.IP
blake3: Uses the BLAKE3 hash algorithm, provied by BLAKE3-team's c implementation of BLAKE3
.IP
md5: Uses the MD5 hash algorithm, provided by OpenSSL.
.IP
crc32: Uses the CRC32 checksum, provided by Zlib.
.IP
xxhash: Uses the xxHash hash algorithm, provided by xxHash and a mandatory dependency.
.TP
\fB-s\fR, \fB\-\-scan\fR
Sets the number of bytes that are scanned for a proper fragment, if no proper fragment is found. Specifically, if the last fragment was good, then this scans s bytes ahead for another good fragment, otherwise it scans s bytes ahead and behind.
.TP
\fB-T\fR, \fB\-\-threads\fR
Sets the number of threads that are used to encode/decode concurrently. A given value of 0 is equivalent to the minimum of either the number of interleaved blocks or the number of threads available. By default, bef will only use one thread. Currently multithreading support is implemented via OpenMP.
.TP
\fB\-i\fR, \fB\-\-input\fR
The given input file to read from. If none are given, then by default it will read from STDIN.
.TP
\fB\-o\fR, \fB\-\-output\fR
The given output file to write to. If none are given, then by default it will write to STDOUT. Warning, by default the file given will be truncated.
.SH "SEE ALSO"
\fBpar2\fR(1)
.SH "BUGS"
Report bugs at: https://github.com/gbletr42/bef/issues
.SH "AUTHOR"
gbletr42
